plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    alias(libs.plugins.springBootPlugin)
    alias(libs.plugins.springDepManagementPlugin)
}

group = 'by.mrrockka'
version = '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

defaultTasks "clean", "assemble"

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.defaultComponentModel=spring',
    ]
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation libs.springBootJdbc
    implementation libs.springBootWeb
    implementation libs.springBootAop
    implementation libs.springBootTelegrambots
    implementation project(":lib")
    implementation libs.apacheCommonsLang3
    implementation libs.postgresql
    implementation libs.liquibase
    implementation libs.mapstructCore
    implementation libs.lombokMapstructBinding

    runtimeOnly libs.aspectjWeaver

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.mapstructProcessor
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testAnnotationProcessor libs.mapstructProcessor

    testRuntimeOnly libs.aspectjWeaver
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoJupiter
    testImplementation libs.jupiter
    testImplementation libs.assertjCore
    testImplementation libs.testContainerPostgresql
    testImplementation libs.testContainerJupiter
    testImplementation libs.springBootTest
    testImplementation(libs.javaFaker) {
        exclude group: 'org.yaml'
    }
    testImplementation(testFixtures(project(":lib")))
}

application {
    mainClass = 'by.mrrockka.TelegramApplication'
}

sourceSets {
    integration {
//        java.srcDir ['src/test/integration/java']
//        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

test {
    useJUnitPlatform()
    filter.excludeTestsMatching "by.mrrockka.integration.*"
//    testClassesDirs = sourceSets.test.output.classesDirs
//    classpath = sourceSets.test.runtimeClasspath
}

task register("integrationTest", Test) {
    useJUnitPlatform()
    filter.includeTestsMatching "by.mrrockka.integration.*"
//    testClassesDirs = sourceSets.integration.output.classesDirs
//    classpath = sourceSets.integration.runtimeClasspath
//    mustRunAfter test
}

check.dependsOn integrationTest