plugins {
    id 'java'
    id 'maven-publish'
    id 'java-test-fixtures'
    alias(libs.plugins.springBootPlugin)
    alias(libs.plugins.springDepManagementPlugin)
}

group = 'by.mrrockka'
version = '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

defaultTasks "clean", "assemble"

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.defaultComponentModel=spring',
    ]
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation libs.springBootJdbc
    implementation libs.postgresql
    implementation libs.liquibase
    implementation libs.jacksonDataformat
    implementation libs.mapstructCore
    implementation libs.lombokMapstructBinding
    implementation libs.hikariCP

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.mapstructProcessor

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testAnnotationProcessor libs.mapstructProcessor

    testFixturesCompileOnly libs.lombok
    testFixturesAnnotationProcessor libs.lombok
    testFixturesAnnotationProcessor libs.mapstructProcessor

    testImplementation libs.assertjCore
    testImplementation libs.springBootTest

    testFixturesApi libs.testContainerPostgresql
    testFixturesApi libs.testContainerJupiter
    testFixturesApi libs.jupiter
    testFixturesApi(libs.javaFaker) {
        exclude group: 'org.yaml'
    }
}

sourceSets {
    integration {
//        java.srcDir ['src/test/integration/java']
//        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

test {
    useJUnitPlatform()
    filter.excludeTestsMatching "by.mrrockka.integration.*"
}

tasks.register("integrationTest", Test) {
    useJUnitPlatform()
    filter.includeTestsMatching "by.mrrockka.integration.*"
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    mustRunAfter test
}

check.dependsOn integrationTest

bootJar {
    enabled = false
}

bootRun {
    enabled = false
}

jar {
    enabled = true
}